---
- name: include OS family specific vars
  with_first_found:
    - '../vars/os-families/{{ ansible_os_family }}.yml'
    - ../vars/os-families/default.yml
  include_vars: '{{ item }}'

- name: install dependencies
  become: yes
  package:
    name: '{{ item }}'
    state: present
  with_items: '{{ git_credential_manager_dependencies }}'

- name: create download directory
  file:
    state: directory
    mode: 'u=rwx,go=rx'
    dest: '{{ git_credential_manager_download_dir }}'

- name: download JRE
  get_url:
    url: 'https://api.adoptopenjdk.net/v2/binary/releases/openjdk{{ git_credential_manager_jre_major_version }}?openjdk_impl=openj9&heap_size=normal&os={{ git_credential_manager_os }}&arch={{ git_credential_manager_architecture }}&release={{ git_credential_manager_jre_version }}&type=jdk'
    dest: '{{ git_credential_manager_download_dir }}/{{ git_credential_manager_jre_filename }}'
    sha256sum: '{{ git_credential_manager_jre_sha256sum }}'
    force: no
    use_proxy: yes
    validate_certs: yes
    mode: 'u=rw,go=r'

- name: download the Git Credential Manager
  get_url:
    url: '{{ git_credential_manager_jar_mirror }}/{{ git_credential_manager_jar_filename }}'
    dest: '{{ git_credential_manager_download_dir }}/{{ git_credential_manager_jar_filename }}'
    sha256sum: '{{ git_credential_manager_jar_sha256sum }}'
    force: no
    use_proxy: yes
    validate_certs: yes
    mode: 'u=rw,go=r'

- name: create the Git Credential Manager installation directories
  become: yes
  file:
    state: directory
    owner: root
    group: root
    mode: 'u=rwx,go=rx'
    dest: '{{ item }}'
  with_items:
    - '{{ git_credential_manager_install_dir }}'
    - '{{ git_credential_manager_install_dir }}/bin'
    - '{{ git_credential_manager_install_dir }}/libexec'

- name: install JRE
  become: yes
  # TODO replace with unarchive module when JRE releases of OpenJ9 are available
  command: >
    tar --extract --gunzip --no-same-owner
        --file '{{ git_credential_manager_download_dir }}/{{ git_credential_manager_jre_filename }}'
        --strip-components=2 --wildcards '*/jre'
  args:
    chdir: '{{ git_credential_manager_install_dir }}'
    creates: '{{ git_credential_manager_install_dir }}/jre'
    # We need to use tar directly because the unarchive module doesn't support partial extraction
    warn: no

# The OpenJ9 package appears to be missing read permissions in /lib & /lib/ext
- name: set JRE file permissions
  file:
    path: '{{ git_credential_manager_install_dir }}/jre'
    recurse: yes
    mode: 'go+r'

- name: install Git Credential Manager
  become: yes
  copy:
    src: '{{ git_credential_manager_download_dir }}/{{ git_credential_manager_jar_filename }}'
    dest: '{{ git_credential_manager_install_dir }}/libexec/{{ git_credential_manager_jar_filename }}'
    remote_src: yes
    owner: root
    group: root
    mode: 'u=rw,go=r'

- name: create launcher
  become: yes
  template:
    src: git-credential-manager.j2
    dest: '{{ git_credential_manager_install_dir }}/bin/git-credential-manager'
    owner: root
    group: root
    mode: 'u=rwx,go=rx'

- name: create symbolic link
  become: yes
  file:
    state: link
    src: '{{ git_credential_manager_install_dir }}/bin/git-credential-manager'
    dest: '{{ git_credential_manager_link }}'
    owner: root
    group: root
    mode: 'u=rwx,go=rx'

- name: check Git config
  become: yes
  git_config:
    scope: system
    name: '{{ git_credential_manager_git_config_key }}'
  register: git_config_result

- name: configure Git
  become: yes
  git_config:
    scope: system
    name: '{{ git_credential_manager_git_config_key }}'
    value: '{{ git_credential_manager_git_config_value }}'
  # git_config fails to set changed correctly due to quoting so we have to handle idempotence
  when: (git_config_result.config_value | regex_replace("'", '')) != (git_credential_manager_git_config_value | regex_replace("'", ''))
